#
# Viz-A-Thon 1
# Week 7
# Author: Wachiraphan Charoenwet
# Stanford Mass Shootings in America, courtesy of the Stanford Geospatial Center and Stanford Libraries
#
df <- read.csv('Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
# remove last NA line
df <- head(df, -1)
# first visualization - beside barplot, comparing total number of victims and fatalities by year groups
#  clean up year
year_list <- as.Date(df$Date, "%m/%d/%Y")
df$Year <- as.numeric(format(year_list, "%Y"))
# ranging dimensions
range_agrs <- c('< 1973', '1973 - 1982', '1983 - 1992', '1993 - 2002', '2003 - 2012', '>= 2013');
new_df <- data.frame()
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year < 1973, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year < 1973, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 1973 & df$Year < 1983, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 1973 & df$Year < 1983, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 1983 & df$Year < 1993, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 1983 & df$Year < 1993, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 1993 & df$Year < 2003, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 1993 & df$Year < 2003, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 2003 & df$Year < 2013, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 2003 & df$Year < 2013, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 2013, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 2013, 'Total.Number.of.Fatalities'])
))
bp <- barplot(rbind(new_df$Total.Victims, new_df$Total.Fatalities), beside = TRUE,
names.arg = range_agrs, legend = c('Total Victims Injured', 'Total Fatalities'), main = 'Total Victims Injured and Fatalities by Decade')
text(bp, 100, rbind(new_df$Total.Victims, new_df$Total.Fatalities), cex=0.7)
# second visualization - stacked barplot, mental illness history and victim group
# incidents by victim group
tb <- table(df$History.of.Mental.Illness...General,df$Targeted.Victim.s.General)
barplot(tb, las=2,
legend.text = c('No Mental Illness History', 'Unknow Mental Illness History', 'Mental Illness History'),
main = 'Mental Illness History and Victim Group')
df <- read.csv('Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
# remove last NA line
df <- head(df, -1)
# incidents by victim group
tb <- table(df$History.of.Mental.Illness...General,df$Targeted.Victim.s.General)
barplot(tb, las=2,
legend.text = c('No Mental Illness History', 'Unknow Mental Illness History', 'Mental Illness History'),
main = 'Mental Illness History and Victim Group')
tb <- table(df$History.of.Mental.Illness...General,df$Targeted.Victim.s.General)
df <- read.csv('Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
# remove last NA line
df <- head(df, -1)
tb <- table(df$History.of.Mental.Illness...General,df$Targeted.Victim.s.General)
df$Targeted.Victim.s.General
df
df
df <- read.csv('Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
df <- head(df, -1)
tb <- table(df$History.of.Mental.Illness...General, df$Targeted.Victim.s.General)
barplot(tb, las=2,
legend.text = c('No Mental Illness History', 'Unknow Mental Illness History', 'Mental Illness History'),
main = 'Mental Illness History and Victim Group')
f$Targeted.Victim.s.General
df$Targeted.Victim.s.General
tb
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
# remove last NA line
df <- head(df, -1)
tb <- table(df$History.of.Mental.Illness...General, df$Targeted.Victim.s.General)
tb
barplot(tb, las=2,
legend.text = c('No Mental Illness History', 'Unknow Mental Illness History', 'Mental Illness History'),
main = 'Mental Illness History and Victim Group')
plot(df$Place.Type, df$Day.of.Week)
plot(c(1,2,3,4,5), c(10,4,234,234,223))
plot(c('a','b','c'), c('c','d','d'))
plot(c(1:3), c('c','d','d'))
plot(c('c','d','d'), c(1:3))
load("~/Documents/IM Vault/IST 719/Poster/Sample Dataset/Sleeping/Loaded-dataset.RData")
all_states <- map_data("state")
load("~/Documents/IM Vault/IST 719/Poster/Sample Dataset/Sleeping/Loaded-dataset.RData")
map('state')
library(maps)
library(mapdata)
map('state')
https://gregorybooma.wordpress.com/2013/01/05/map-of-the-united-states-including-alaska-and-hawaii-with-r/*
View(all_states)
library(maps)
```
map('state')
#convert HR to Min -> precision
df2014$sleptim1_min <- df2014$sleptim1 *60
state_avg <- aggregate(df2014[, 'sleptim1_min'], list(df2014$State), mean)
state_avg <- state_avg[state_avg$Group.1!='DC', ]
state_avg <- state_avg[state_avg$Group.1!='AK', ]
# start here for map plotting - find workaround to add HI and AK
# values <- runif(length(state.abb),0,1)
range <- (max(state_avg$x) - min(state_avg$x))  #expanding value frame -> 23 minutes different
values <- (state_avg$x - min(state_avg$x)) * 2.5
values <- (state_avg$x - min(state_avg$x)) / range  # 0...1
values <- (state_avg$x - min(state_avg$x))
valueLabel <- c(1:length(values))
for (i in 1:length(values)) {
if(values[i]<5) valueLabel[i] <- .2
else if(values[i]<10) valueLabel[i] <- .4
else if(values[i]<15) valueLabel[i] <- .6
else if(values[i]<20) valueLabel[i] <- .8
else valueLabel[i] <- 1
}
names(valueLabel) <- state_avg$Group.1
names(values) <- state_avg$Group.1
tmp <- map('state',plot=FALSE,namesonly=TRUE )
#matching (after adjusting using gsub and tolower)
tmp <- match(gsub('(:.*)','',tmp),c(tolower(state_avg$Group.1)))
#convert your numbers to grey-scale and selct using the match
map('state',fill=TRUE,col=rgb(colorRamp(c('pink','darkblue'))(valueLabel), max=255)[tmp])
#state average - Give full state's name for state map
#convert HR to Min -> precision
df2014$sleptim1_min <- df2014$sleptim1 *60
state_avg <- aggregate(df2014[, 'sleptim1_min'], list(df2014$State), mean)
state_avg <- state_avg[state_avg$Group.1!='DC', ]
state_avg <- state_avg[state_avg$Group.1!='AK', ]
# start here for map plotting - find workaround to add HI and AK
# values <- runif(length(state.abb),0,1)
range <- (max(state_avg$x) - min(state_avg$x))  #expanding value frame -> 23 minutes different
values <- (state_avg$x - min(state_avg$x)) * 2.5
values <- (state_avg$x - min(state_avg$x)) / range  # 0...1
values <- (state_avg$x - min(state_avg$x))
valueLabel <- c(1:length(values))
for (i in 1:length(values)) {
if(values[i]<5) valueLabel[i] <- .2
else if(values[i]<10) valueLabel[i] <- .4
else if(values[i]<15) valueLabel[i] <- .6
else if(values[i]<20) valueLabel[i] <- .8
else valueLabel[i] <- 1
}
names(valueLabel) <- state_avg$Group.1
names(values) <- state_avg$Group.1
head(valueLabel)
library(shiny)
install.packages('shiny')
library(shiny)
*http://www.cdc.gov/sleep/data_statistics.html*
detach("package:stats", unload=TRUE)
library(googleVis)
demo(WorldBank)
install.packages('googleVis')
library(googleVis)
demo(WorldBank)
library(httr)
# 1. Find OAuth settings for twitter:
#    https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
#    Make sure to set callback url to "http://127.0.0.1:1410"
#
#    Replace key and secret below
myapp <- oauth_app("twitter",
key = "TYrWFPkFAkn4G5BbkWINYw",
secret = "qjOkmKYU9kWfUFWmekJuu5tztE9aEfLbt26WlhZL8"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
content(req)
mallet_stopwords <- c('a', 'able', 'about', 'above', 'according', 'accordingly', 'across', 'actually', 'after', 'afterwards', 'again', 'against', 'all', 'allow', 'allows', 'almost', 'alone', 'along', 'already', 'also', 'although', 'always', 'am', 'among', 'amongst', 'an', 'and', 'another', 'any', 'anybody', 'anyhow', 'anyone', 'anything', 'anyway', 'anyways', 'anywhere', 'apart', 'appear', 'appreciate', 'appropriate', 'are', 'around', 'as', 'aside', 'ask', 'asking', 'associated', 'at', 'available', 'away', 'awfully', 'b', 'be', 'became', 'because', 'become', 'becomes', 'becoming', 'been', 'before', 'beforehand', 'behind', 'being', 'believe', 'below', 'beside', 'besides', 'best', 'better', 'between', 'beyond', 'both', 'brief', 'but', 'by', 'c', 'came', 'can', 'cannot', 'cant', 'cause', 'causes', 'certain', 'certainly', 'changes', 'clearly', 'co', 'com', 'come', 'comes', 'concerning', 'consequently', 'consider', 'considering', 'contain', 'containing', 'contains', 'corresponding', 'could', 'course', 'currently', 'd', 'definitely', 'described', 'despite', 'did', 'different', 'do', 'does', 'doing', 'done', 'down', 'downwards', 'during', 'e', 'each', 'edu', 'eg', 'eight', 'either', 'else', 'elsewhere', 'enough', 'entirely', 'especially', 'et', 'etc', 'even', 'ever', 'every', 'everybody', 'everyone', 'everything', 'everywhere', 'ex', 'exactly', 'example', 'except', 'f', 'far', 'few', 'fifth', 'first', 'five', 'followed', 'following', 'follows', 'for', 'former', 'formerly', 'forth', 'four', 'from', 'further', 'furthermore', 'g', 'get', 'gets', 'getting', 'given', 'gives', 'go', 'goes', 'going', 'gone', 'got', 'gotten', 'greetings', 'h', 'had', 'happens', 'hardly', 'has', 'have', 'having', 'he', 'hello', 'help', 'hence', 'her', 'here', 'hereafter', 'hereby', 'herein', 'hereupon', 'hers', 'herself', 'hi', 'him', 'himself', 'his', 'hither', 'hopefully', 'how', 'howbeit', 'however', 'i', 'ie', 'if', 'ignored', 'immediate', 'in', 'inasmuch', 'inc', 'indeed', 'indicate', 'indicated', 'indicates', 'inner', 'insofar', 'instead', 'into', 'inward', 'is', 'it', 'its', 'itself', 'j', 'just', 'k', 'keep', 'keeps', 'kept', 'know', 'knows', 'known', 'l', 'last', 'lately', 'later', 'latter', 'latterly', 'least', 'less', 'lest', 'let', 'like', 'liked', 'likely', 'little', 'look', 'looking', 'looks', 'ltd', 'm', 'mainly', 'many', 'may', 'maybe', 'me', 'mean', 'meanwhile', 'merely', 'might', 'more', 'moreover', 'most', 'mostly', 'much', 'must', 'my', 'myself', 'n', 'name', 'namely', 'nd', 'near', 'nearly', 'necessary', 'need', 'needs', 'neither', 'never', 'nevertheless', 'new', 'next', 'nine', 'no', 'nobody', 'non', 'none', 'noone', 'nor', 'normally', 'not', 'nothing', 'novel', 'now', 'nowhere', 'o', 'obviously', 'of', 'off', 'often', 'oh', 'ok', 'okay', 'old', 'on', 'once', 'one', 'ones', 'only', 'onto', 'or', 'other', 'others', 'otherwise', 'ought', 'our', 'ours', 'ourselves', 'out', 'outside', 'over', 'overall', 'own', 'p', 'particular', 'particularly', 'per', 'perhaps', 'placed', 'please', 'plus', 'possible', 'presumably', 'probably', 'provides', 'q', 'que', 'quite', 'qv', 'r', 'rather', 'rd', 're', 'really', 'reasonably', 'regarding', 'regardless', 'regards', 'relatively', 'respectively', 'right', 's', 'said', 'same', 'saw', 'say', 'saying', 'says', 'second', 'secondly', 'see', 'seeing', 'seem', 'seemed', 'seeming', 'seems', 'seen', 'self', 'selves', 'sensible', 'sent', 'serious', 'seriously', 'seven', 'several', 'shall', 'she', 'should', 'since', 'six', 'so', 'some', 'somebody', 'somehow', 'someone', 'something', 'sometime', 'sometimes', 'somewhat', 'somewhere', 'soon', 'sorry', 'specified', 'specify', 'specifying', 'still', 'sub', 'such', 'sup', 'sure', 't', 'take', 'taken', 'tell', 'tends', 'th', 'than', 'thank', 'thanks', 'thanx', 'that', 'thats', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'thence', 'there', 'thereafter', 'thereby', 'therefore', 'therein', 'theres', 'thereupon', 'these', 'they', 'think', 'third', 'this', 'thorough', 'thoroughly', 'those', 'though', 'three', 'through', 'throughout', 'thru', 'thus', 'to', 'together', 'too', 'took', 'toward', 'towards', 'tried', 'tries', 'truly', 'try', 'trying', 'twice', 'two', 'u', 'un', 'under', 'unfortunately', 'unless', 'unlikely', 'until', 'unto', 'up', 'upon', 'us', 'use', 'used', 'useful', 'uses', 'using', 'usually', 'uucp', 'v', 'value', 'various', 'very', 'via', 'viz', 'vs', 'w', 'want', 'wants', 'was', 'way', 'we', 'welcome', 'well', 'went', 'were', 'what', 'whatever', 'when', 'whence', 'whenever', 'where', 'whereafter', 'whereas', 'whereby', 'wherein', 'whereupon', 'wherever', 'whether', 'which', 'while', 'whither', 'who', 'whoever', 'whole', 'whom', 'whose', 'why', 'will', 'willing', 'wish', 'with', 'within', 'without', 'wonder', 'would', 'would', 'x', 'y', 'yes', 'yet', 'you', 'your', 'yours', 'yourself', 'yourselves', 'z', 'zero')
"
"
'
''
mallet_stopwords <- c("a", "able", "about", "above", "according", "accordingly", "across", "actually", "after", "afterwards", "again", "against", "all", "allow", "allows", "almost", "alone", "along", "already", "also", "although", "always", "am", "among", "amongst", "an", "and", "another", "any", "anybody", "anyhow", "anyone", "anything", "anyway", "anyways", "anywhere", "apart", "appear", "appreciate", "appropriate", "are", "around", "as", "aside", "ask", "asking", "associated", "at", "available", "away", "awfully", "b", "be", "became", "because", "become", "becomes", "becoming", "been", "before", "beforehand", "behind", "being", "believe", "below", "beside", "besides", "best", "better", "between", "beyond", "both", "brief", "but", "by", "c", "came", "can", "cannot", "cant", "cause", "causes", "certain", "certainly", "changes", "clearly", "co", "com", "come", "comes", "concerning", "consequently", "consider", "considering", "contain", "containing", "contains", "corresponding", "could", "course", "currently", "d", "definitely", "described", "despite", "did", "different", "do", "does", "doing", "done", "down", "downwards", "during", "e", "each", "edu", "eg", "eight", "either", "else", "elsewhere", "enough", "entirely", "especially", "et", "etc", "even", "ever", "every", "everybody", "everyone", "everything", "everywhere", "ex", "exactly", "example", "except", "f", "far", "few", "fifth", "first", "five", "followed", "following", "follows", "for", "former", "formerly", "forth", "four", "from", "further", "furthermore", "g", "get", "gets", "getting", "given", "gives", "go", "goes", "going", "gone", "got", "gotten", "greetings", "h", "had", "happens", "hardly", "has", "have", "having", "he", "hello", "help", "hence", "her", "here", "hereafter", "hereby", "herein", "hereupon", "hers", "herself", "hi", "him", "himself", "his", "hither", "hopefully", "how", "howbeit", "however", "i", "ie", "if", "ignored", "immediate", "in", "inasmuch", "inc", "indeed", "indicate", "indicated", "indicates", "inner", "insofar", "instead", "into", "inward", "is", "it", "its", "itself", "j", "just", "k", "keep", "keeps", "kept", "know", "knows", "known", "l", "last", "lately", "later", "latter", "latterly", "least", "less", "lest", "let", "like", "liked", "likely", "little", "look", "looking", "looks", "ltd", "m", "mainly", "many", "may", "maybe", "me", "mean", "meanwhile", "merely", "might", "more", "moreover", "most", "mostly", "much", "must", "my", "myself", "n", "name", "namely", "nd", "near", "nearly", "necessary", "need", "needs", "neither", "never", "nevertheless", "new", "next", "nine", "no", "nobody", "non", "none", "noone", "nor", "normally", "not", "nothing", "novel", "now", "nowhere", "o", "obviously", "of", "off", "often", "oh", "ok", "okay", "old", "on", "once", "one", "ones", "only", "onto", "or", "other", "others", "otherwise", "ought", "our", "ours", "ourselves", "out", "outside", "over", "overall", "own", "p", "particular", "particularly", "per", "perhaps", "placed", "please", "plus", "possible", "presumably", "probably", "provides", "q", "que", "quite", "qv", "r", "rather", "rd", "re", "really", "reasonably", "regarding", "regardless", "regards", "relatively", "respectively", "right", "s", "said", "same", "saw", "say", "saying", "says", "second", "secondly", "see", "seeing", "seem", "seemed", "seeming", "seems", "seen", "self", "selves", "sensible", "sent", "serious", "seriously", "seven", "several", "shall", "she", "should", "since", "six", "so", "some", "somebody", "somehow", "someone", "something", "sometime", "sometimes", "somewhat", "somewhere", "soon", "sorry", "specified", "specify", "specifying", "still", "sub", "such", "sup", "sure", "t", "take", "taken", "tell", "tends", "th", "than", "thank", "thanks", "thanx", "that", "thats", "the", "their", "theirs", "them", "themselves", "then", "thence", "there", "thereafter", "thereby", "therefore", "therein", "theres", "thereupon", "these", "they", "think", "third", "this", "thorough", "thoroughly", "those", "though", "three", "through", "throughout", "thru", "thus", "to", "together", "too", "took", "toward", "towards", "tried", "tries", "truly", "try", "trying", "twice", "two", "u", "un", "under", "unfortunately", "unless", "unlikely", "until", "unto", "up", "upon", "us", "use", "used", "useful", "uses", "using", "usually", "uucp", "v", "value", "various", "very", "via", "viz", "vs", "w", "want", "wants", "was", "way", "we", "welcome", "well", "went", "were", "what", "whatever", "when", "whence", "whenever", "where", "whereafter", "whereas", "whereby", "wherein", "whereupon", "wherever", "whether", "which", "while", "whither", "who", "whoever", "whole", "whom", "whose", "why", "will", "willing", "wish", "with", "within", "without", "wonder", "would", "would", "x", "y", "yes", "yet", "you", "your", "yours", "yourself", "yourselves", "z", "zero")
''
'
''
''
'
""
"
c('a', 'able', 'about', 'above', 'according', 'accordingly', 'across', 'actually', 'after', 'afterwards', 'again', 'against', 'all', 'allow', 'allows', 'almost', 'alone', 'along', 'already', 'also', 'although', 'always', 'am', 'among', 'amongst', 'an', 'and', 'another', 'any', 'anybody', 'anyhow', 'anyone', 'anything', 'anyway', 'anyways', 'anywhere', 'apart', 'appear', 'appreciate', 'appropriate', 'are', 'around', 'as', 'aside', 'ask', 'asking', 'associated', 'at', 'available', 'away', 'awfully', 'b', 'be', 'became', 'because', 'become', 'becomes', 'becoming', 'been', 'before', 'beforehand', 'behind', 'being', 'believe', 'below', 'beside', 'besides', 'best', 'better', 'between', 'beyond', 'both', 'brief', 'but', 'by', 'c', 'came', 'can', 'cannot', 'cant', 'cause', 'causes', 'certain', 'certainly', 'changes', 'clearly', 'co', 'com', 'come', 'comes', 'concerning', 'consequently', 'consider', 'considering', 'contain', 'containing', 'contains', 'corresponding', 'could', 'course', 'currently', 'd', 'definitely', 'described', 'despite', 'did', 'different', 'do', 'does', 'doing', 'done', 'down', 'downwards', 'during', 'e', 'each', 'edu', 'eg', 'eight', 'either', 'else', 'elsewhere', 'enough', 'entirely', 'especially', 'et', 'etc', 'even', 'ever', 'every', 'everybody', 'everyone', 'everything', 'everywhere', 'ex', 'exactly', 'example', 'except', 'f', 'far', 'few', 'fifth', 'first', 'five', 'followed', 'following', 'follows', 'for', 'former', 'formerly', 'forth', 'four', 'from', 'further', 'furthermore', 'g', 'get', 'gets', 'getting', 'given', 'gives', 'go', 'goes', 'going', 'gone', 'got', 'gotten', 'greetings', 'h', 'had', 'happens', 'hardly', 'has', 'have', 'having', 'he', 'hello', 'help', 'hence', 'her', 'here', 'hereafter', 'hereby', 'herein', 'hereupon', 'hers', 'herself', 'hi', 'him', 'himself', 'his', 'hither', 'hopefully', 'how', 'howbeit', 'however', 'i', 'ie', 'if', 'ignored', 'immediate', 'in', 'inasmuch', 'inc', 'indeed', 'indicate', 'indicated', 'indicates', 'inner', 'insofar', 'instead', 'into', 'inward', 'is', 'it', 'its', 'itself', 'j', 'just', 'k', 'keep', 'keeps', 'kept', 'know', 'knows', 'known', 'l', 'last', 'lately', 'later', 'latter', 'latterly', 'least', 'less', 'lest', 'let', 'like', 'liked', 'likely', 'little', 'look', 'looking', 'looks', 'ltd', 'm', 'mainly', 'many', 'may', 'maybe', 'me', 'mean', 'meanwhile', 'merely', 'might', 'more', 'moreover', 'most', 'mostly', 'much', 'must', 'my', 'myself', 'n', 'name', 'namely', 'nd', 'near', 'nearly', 'necessary', 'need', 'needs', 'neither', 'never', 'nevertheless', 'new', 'next', 'nine', 'no', 'nobody', 'non', 'none', 'noone', 'nor', 'normally', 'not', 'nothing', 'novel', 'now', 'nowhere', 'o', 'obviously', 'of', 'off', 'often', 'oh', 'ok', 'okay', 'old', 'on', 'once', 'one', 'ones', 'only', 'onto', 'or', 'other', 'others', 'otherwise', 'ought', 'our', 'ours', 'ourselves', 'out', 'outside', 'over', 'overall', 'own', 'p', 'particular', 'particularly', 'per', 'perhaps', 'placed', 'please', 'plus', 'possible', 'presumably', 'probably', 'provides', 'q', 'que', 'quite', 'qv', 'r', 'rather', 'rd', 're', 'really', 'reasonably', 'regarding', 'regardless', 'regards', 'relatively', 'respectively', 'right', 's', 'said', 'same', 'saw', 'say', 'saying', 'says', 'second', 'secondly', 'see', 'seeing', 'seem', 'seemed', 'seeming', 'seems', 'seen', 'self', 'selves', 'sensible', 'sent', 'serious', 'seriously', 'seven', 'several', 'shall', 'she', 'should', 'since', 'six', 'so', 'some', 'somebody', 'somehow', 'someone', 'something', 'sometime', 'sometimes', 'somewhat', 'somewhere', 'soon', 'sorry', 'specified', 'specify', 'specifying', 'still', 'sub', 'such', 'sup', 'sure', 't', 'take', 'taken', 'tell', 'tends', 'th', 'than', 'thank', 'thanks', 'thanx', 'that', 'thats', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'thence', 'there', 'thereafter', 'thereby', 'therefore', 'therein', 'theres', 'thereupon', 'these', 'they', 'think', 'third', 'this', 'thorough', 'thoroughly', 'those', 'though', 'three', 'through', 'throughout', 'thru', 'thus', 'to', 'together', 'too', 'took', 'toward', 'towards', 'tried', 'tries', 'truly', 'try', 'trying', 'twice', 'two', 'u', 'un', 'under', 'unfortunately', 'unless', 'unlikely', 'until', 'unto', 'up', 'upon', 'us', 'use', 'used', 'useful', 'uses', 'using', 'usually', 'uucp', 'v', 'value', 'various', 'very', 'via', 'viz', 'vs', 'w', 'want', 'wants', 'was', 'way', 'we', 'welcome', 'well', 'went', 'were', 'what', 'whatever', 'when', 'whence', 'whenever', 'where', 'whereafter', 'whereas', 'whereby', 'wherein', 'whereupon', 'wherever', 'whether', 'which', 'while', 'whither', 'who', 'whoever', 'whole', 'whom', 'whose', 'why', 'will', 'willing', 'wish', 'with', 'within', 'without', 'wonder', 'would', 'would', 'x', 'y', 'yes', 'yet', 'you', 'your', 'yours', 'yourself', 'yourselves', 'z', 'zero')
print
""
""
""
""
library(tm)
library(topicmodels)
5^4
sin(1)
1:4
sin(1:4)
sin(-1:1)
plot(sin(1))
plot(sin(-0.5:0.5))
plot(sin(-5:5))
plot(sin(-1000:1000))
plot(sin(-100:100))
y     <- c(100.1, 100.2, 100, 99, 99.9)
yDiff <- diff(y)
plot(sin(-100:100), type=1)
plot(sin(-100:100), type="1")
plot(sin(-100:100), type = "1")
plot(sin(-100:100), 1)
plot(sin(-100:100), "1")
x <- c(1, 2, 3.2, 4, 3, 2.1, 9, 19)
plot(x)
plot(x, type=1)
plot(x, type="1")
plot.xy(x, type="1")
plot(rnorm(1000), col = "blue", main = "Yo!", xlab = "Time", ylab = "Returns")
grid()
abline(v = 400, lwd = 2, col = "red")
abline(h = 2, lwd = 3, col = "cadetblue")
?rnorm
?rnorm(1000)
rnorm(1000)
plot(rnorm(100), col = "blue", main = "Graph 2", type = "l")
plot(sin(-100:100), col = "blue", main = "Graph 2", type = "l")
emptyArray <- c()
system.time(
for(i in 1:100000) {
emptyArray[i] <- i
})
fullArray         <- c(NA)
length(fullArray) <- 100000
system.time(
for(i in 1:100000) {
fullArray[i] <- i
})
rnorm(16,0,1)
rnorm(16,0,1)
install.packages('xts')
xts()
library(xts)
data(sample_matrix)
myXts <- as.xts(sample_matrix, descr='my new xts object')
head(sample_matrix)
myXts
class(myXts)
sample(myXts)
str(myXts)
myXts['2007']
myXts['2007-01-03']
?xts
install.packages("quantmod")
library(quantmod)
getSymbols("GS")
chartSeries(GS)
getSymbols("GS")
chartSeries(GS)
barChart(GS,theme='white.mono', bar.type='hlc')
x    <- rnorm(1000)
y    <- (x - 2) + rnorm(1000)
outR <- lm(y ~ x)
summary(outR)
res <- outR$residuals
par(mfrow = c(2,1))
plot(res, col = "blue", main = "Residual Plot")
acf(res)
y
x
?ln
?lm
outR
y ~ x
lm(y)
lm(x)
lm(y ~ x)
x    <- rnorm(1000)
y    <- (x - 2) + rnorm(1000)
outR <- lm(y ~ x)
summary(outR)
x    <- rnorm(1000)
y    <- (x - 2) + rnorm(1000)
outR <- lm(y ~ x)
summary(outR)
outR
require(quantmod)
symbols <- c("AAPL", "QQQQ")
getSymbols(symbols)
install.packages('quantmod')
install.packages("quantmod")
library(quantmod)
getSymbols(symbols)
set.seed(100)
X <- rnorm(1000000, 2.33, 0.5)
mu <- mean(X)
sd <- sd(X)
hist(X, col = "blue", breaks = 100)
abline(v = mu, col = "red", lwd = 3)
sample5 <- sample(X, 5, replace = TRUE)
sample10 <- sample(X, 10, replace = TRUE)
sample50 <- sample(X, 50, replace = TRUE)
mean(sample5)
mean(sample10)
mean(sample50)
mean(sample(X,1000,replace=TRUE))
mean(sample(X,10000,replace=TRUE))
mu
cumsum(rnorm(1000,0,1))
rnorm(1000,0,1)
?cumsum
cumsum(1:10)
cumsum(rnorm(1000,0,1))
cumsum(rnorm(1000,0,1))
cumsum(rnorm(1000,0,1))
bm <- cumsum(rnorm(1000,0,1))
bm <- bm - bm[1]
bm
bm[1]
plot(bm, main = "Brownian Motion", col = "blue", type = "l")
cumsum(rnorm(1000,0,1))
bm <- cumsum(rnorm(1000,0,1
)
)
bm
plot(bm, main = "Brownian Motion", col = "blue", type = "l")
diff(bm)
plot(diff(bm))
?acf
hist(diff(bm))
install.packages('devtools')
devtools::install_github('fawda123/rStrava')
install.packages('ggrepel')
packageurl <- "https://cran.r-project.org/src/contrib/Archive/ggrepel/ggrepel_0.6.5.tar.gz"
install.packages(packageurl, contriburl=NULL, type="source")
version
install.packages("installr")
library(installr)
updateR()
library(devtools)
install_github('andreacirilloac/updateR')
versio
version
install.packages('devtools')
stoken <- config(token = strava_oauth('Run, Forest, Run', '23335', '283d4ddd9294865d0b615a31d0733ad13395030c')
)
stoken <- httr::config(token = strava_oauth('Run, Forest, Run', '23335', '283d4ddd9294865d0b615a31d0733ad13395030c'))
library(rStrava)
devtools::install_github('fawda123/rStrava')
stoken <- httr::config(token = strava_oauth('Run, Forest, Run', '23335', '283d4ddd9294865d0b615a31d0733ad13395030c'))
library(rStrava)
stoken <- httr::config(token = strava_oauth('Run, Forest, Run', '23335', '283d4ddd9294865d0b615a31d0733ad13395030c'))
# setup info for rate-limiter
usage_left <- as.integer(c(600, 30000))
# setup info for rate-limiter
usage_left <- as.integer(c(600, 30000))
# get basic user info
get_basic('https://strava.com/api/v3/athlete', stoken)
# setup info for rate-limiter
usage_left <- as.integer(c(600, 30000))
# get data for another athlete
get_athlete(stoken, '2527465')
# get data for another athlete
get_athlete(stoken, '19096444')
# get data for another athlete
get_athlete(stoken, '27026217')
athl_fun(c(2837007, 2527465, 2140248), trace = FALSE)
cat("google_key=c106b6c9134fdbd2d0a7995c05a3a30b896ec636\n",
file=file.path(normalizePath("~/"), ".Renviron"),
append=TRUE)
# retrieve the key, restart R if not found
mykey <- Sys.getenv("google_key")
mykey
my_acts <- get_activity_list(stoken)
acts <- lapply(my_acts, function(x) x$location_city) %in% c('Pensacola', 'Pensacola Beach', 'Milton')
get_heat_map(my_acts, acts = which(acts), col = 'darkgreen', size = 2, dist = F)
get_heat_map(my_acts, acts = 1, alpha = 1, add_elev = T, f = 0.1, key = mykey, size = 2, col = 'Spectral', maptype = 'satellite', units = 'imperial')
get_spdsplits(my_acts, stoken, acts = 1, units = 'imperial')
get_spdsplits(my_acts, stoken, acts = 1, units = 'metric')
get_heat_map(my_acts, acts = which(acts), col = 'darkgreen', size = 2, distance = F)
ldaOut@gamma
ldaOut
Needed <- c("tm", "SnowballCC", "RColorBrewer", "ggplot2", "wordcloud", "biclust",
"cluster", "igraph", "fpc")
install.packages(Needed, dependencies = TRUE)
# Importing
library(tm)
library(ggplot2)
library(topicmodels)
cCUWInput <- file.path('/Users', 'Png', 'Desktop', '[0] 001', 'Source', 'CW141-master', 'SRC', 'Pool-Clean');
corpusCUWInput <- VCorpus(DirSource(cCUWInput))
CUWfilenames <- list.files(cCUWInput,pattern="*")
writeLines(as.character(corpusCUWInput[1]))
# Cleaning - Restarting Point
processedCUWInput <- tm_map(corpusCUWInput,removePunctuation)
processedCUWInput <- tm_map(processedCUWInput, content_transformer(tolower))
processedCUWInput <- tm_map(processedCUWInput, removeWords, stopwords("english"))
processedCUWInput <- tm_map(processedCUWInput, removeNumbers)
processedCUWInput <- tm_map(processedCUWInput, stripWhitespace)
# Stemming
# processedInput <- tm_map(processedInput,stemDocument)
# Customizing
# TBD
#myStopwords <- c(“can”, “say”,”one”,”way”,”use”,
#                  “also”,”howev”,”tell”,”will”,
#                  “great”,”lot”)
#processedInput <- tm_map(processedInput, removeWords, myStopwords)'''
# Remove certain characters / Non-ASCII characters
for (j in seq(processedCUWInput)) {
processedCUWInput[[j]] <- gsub("\t", " ", processedCUWInput[[j]])
processedCUWInput[[j]] <- gsub("[^\x01-\x7F]", " thai_words", processedCUWInput[[j]])
}
writeLines(as.character(processedCUWInput[1]))
# Convert to plaintext
processedCUWInput <- tm_map(processedCUWInput,PlainTextDocument)
writeLines(as.character(processedCUWInput[1]))
# DTM - TDM
dtmCUWInput <- DocumentTermMatrix(processedCUWInput)
tdmCUWInput <- TermDocumentMatrix(processedCUWInput)
# remove blank rows
rowCUWTotals <- apply(dtmCUWInput , 1, sum)
dtmCUWInput   <- dtmCUWInput[rowCUWTotals> 0, ]
CUWfilenames <- CUWfilenames[rowCUWTotals> 0]
# Word Frequency
freqCUWInput <- colSums(as.matrix(dtmCUWInput))
length(freqInput)
topFreqCUWInput <- head(sort(freqCUWInput, decreasing = TRUE), 200)
wfCUWInput <- data.frame(word=names(topFreqCUWInput), freq=topFreqCUWInput)
# Plotting Word Frequency
pCUWInput <- ggplot(subset(wfCUWInput, freq>10), aes(x = reorder(word, -freq), y = freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=45, hjust=1))
pCUWInput
# Topic Modelling - LDA
# LDA
rownames(dtmCUWInput) <- CUWfilenames
CUWfreq <- colSums(as.matrix(dtmCUWInput))
CUWord <- order(CUWfreq,decreasing=TRUE)
CUWfreq[CUWord]
# LDA params
burnin <- 4000
iter <- 2000
thin <- 500
seed <-list(2003,5,63,100001,765)
nstart <- 5
best <- TRUE
k <- 5  # topics
CUWstart.time <- Sys.time() # Mark computation time
CUWldaOut <-LDA(dtmCUWInput,k,
method="Gibbs",
control=list(nstart=nstart, seed = seed, best=best, burnin = burnin, iter = iter, thin=thin))
CUWldaOut.topics <- as.matrix(topics(CUWldaOut))
CUWend.time <- Sys.time() # Mark computation time - end here
CUWelapsed.time <- CUWstart.time - CUWend.time
CUWelapsed.time
# LDA - Docs to Topic
write.csv(CUWldaOut.topics,file=paste("LDAGibbs", k, "CUW-DocsToTopics.csv"))
# LDA - Topics to Terms
CUWldaOut.terms <- as.matrix(terms(CUWldaOut,5))
write.csv(CUWldaOut.terms,file=paste("LDAGibbs", k, "CUW-TopicsToTerms.csv"))
# LDA - Prob Assignment
CUWtopicProbabilities <- as.data.frame(CUWldaOut@gamma)
write.csv(CUWtopicProbabilities,file=paste("LDAGibbs", k, "CUW-TopicProbabilities.csv"))
CUWtopicProbabilities
heatmap(CUWtopicProbabilities)
heatmap(as.matrix(CUWtopicProbabilities))
cCUWInput
corpusCUWInput
as.data.frame(corpusCUWInput)
?VCorpus
corpusCUWInput[1]
corpusCUWInput[[1]
]
corpusCUWInput[[0]]
?stopwords
stopwords('en')
removePunctuation
?removePunctuation
?LDA
Needed <- c("LSAfun", "lsa")
install.packages(Needed, dependencies = TRUE)
# Importing
library(LSAfun)
library(lsa)
install.packages('rgl')
Needed <- c("LSAfun", "lsa", "rgl")
install.packages(Needed, dependencies = TRUE)
install.packages(Needed, dependencies = TRUE)
# Importing
library(LSAfun)
?R
version
version
library(maps)
library(mapdata)
library(rgdal)
library(plyr)
library(classInt)
library(RColorBrewer)
library(ggplot2)
map("china")
map("china", col = "gray40", ylim = c(18,54))
# correct map loading
library(maptools)
#china_a <- readOGR('StatPlanet_China/map/map.shp')
china_a <- readOGR('Desktop/CHN_adm/CHN_adm1.shp')
china_a <- readOGR('Desktop/StatPlanet_China/map/map.shp')
head(china_a@data)
china_a$NAME_0
china_a$NAME_1
c(china_a$NAME_1)
china_a$NAME_1
shiny::runApp('Desktop/SSTM2018/workspace/Projection/BasicProjection-WebApp')
